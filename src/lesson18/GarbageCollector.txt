Heap хранит пользовательские объекты. Память у нее большая, все потоки обращаются к ней.
В куче хранятся кроме объекта еще и информация о нем
- Заголовок (содержит хэшкод, инфу для многопоточности, если массив, то хранит и эту информацию)
- Память для примитивных свойств
- Память для ссылочных свойств, ведущих к другим объектам
Управлять сборкой мы не можем, должны знать как это делать и выбрать оптимальный, установить опции

System.gc() - вызов метода
long totalMemory = Runtime.getRuntime().totalMemory();
long freeMemory =Runtime.getRuntime().freeMemory();

Сборщики мусора
Serial GC - последовательный сборщик мусора
Мертвые объекты без ссылок определяются
Stop-The-World - остановка выполнения программы во время работы gc
Eden - молодое поколение
Tunered -старшее поколение
Eden - Survivor1 - Survivor2 | Tunered

Parallel GC
Останавливает программу, а сборку осуществляет в несколько потоков
Полезен для машин с несколькими N-процессорами
Создает N потоков для N<8
целую часть от 5N/8 для N>=8

Tunered|Eden - Survivor1 - Survivor2
увеличивает размеры областей на 20%, уменьшает на 5%
Можно регулировать.

G1 (Garbage first) GC -по умолчанию в 9й версии этот
Настроен на работу с большой памятью и многоядерностью
Eden | Survivor1 | Tunered
всегда анализирует предыдущие сборки мусора. Для некоторых операций нужна остановка программы, для некоторых не нужна
Если хватает памяти не лезет в старшее поколение. Если проблемы - то лезет в старшее, если и там нечего удалить - то выдается ошибка

Параллельный G1, все то же самое, только сборку мусора осуществляет в несколько потоков. Можно установить количество потоков на выполнение



Dasha:
Выделение памяти:
-Xms<size>[k|m|G] исходный размер кучи
-Xmx<size>[k|m|G] максимальный размер кучи
-Xss<size>[k|m|G] размер стека вызовов метода

Сборщики мусора - логирование:
-verbose:gc -Xlog:gc*:file.txt -Xlog:gc*

Serial GC - последовательный сборщик мусора
-XX:+UseSerialGC - включение

Patellel GC параллельный сборщик мусора
-XX:+UseParallelGC - включение
-XX:MaxGCPauseMillis=<N> - максимальное время пауз при сборке
-XX:GCTimeRatio=<N> - процент времени выполнения GC от общего времени работы приложения

-XX:YoungGenerationSizeIncrement=<Y> (в %) - для шага увеличения размера молодого поколения

-XX:TenuredGenerationSizeIncrement=<T> (в %) - для шага увеличения размера старшего поколения

-XX:AdaptiveSizeDecrementScaleFactor=<D> - Для шага уменьшения размеров поколения, где процент уменьшения размера поколения вычисляется по формуле X/D, (X — процент увеличения размера поколения, D — значение параметра -XX:AdaptiveSizeDecrementScaleFactor

G1 (Garbage First) GC
-XX:+UseG1GC - включение
-XX:MaxGCPauseMillis=<N> - указывает G1, что в ходе отдельно взятой сборки необходимо избегать пауз дольше N мс
-XX:GCPauseIntervalMillis=<N> - указывает G1, что между сборками мусора должно проходить не менее N мс
-XX:G1HeapRegionSize=<size> [k|m|G] - размер региона
разбивает кучу на молодое и старое поколения.

-XX:ParallelGCThreads=<N> - позволит настраивать количество потоков

http://www.izebit.ru/2016/03/jvm-gc-parameters.html?m=1

JVM параметры для тонкой настройки сборщика мусора
www.izebit.ru